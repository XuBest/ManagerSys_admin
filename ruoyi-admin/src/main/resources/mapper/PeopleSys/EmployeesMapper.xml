<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.PeopleSys.mapper.EmployeesMapper">
    
    <resultMap type="Employees" id="EmployeesResult">
        <result property="EmployeeId"    column="EmployeeId"    />
        <result property="EmployeeName"    column="EmployeeName"    />
        <result property="gender"    column="gender"    />
        <result property="email"    column="email"    />
        <result property="phonenumber"    column="phonenumber"    />
        <result property="position"    column="position"    />
        <result property="department"    column="department"    />
        <result property="enterDate"    column="enterDate"    />
        <result property="status"    column="status"    />
    </resultMap>

    <sql id="selectEmployeesVo">
        select EmployeeId, EmployeeName, gender, email, phonenumber, position, department, enterDate, status from employees
    </sql>

    <select id="selectEmployeesList" parameterType="Employees" resultMap="EmployeesResult">
        <include refid="selectEmployeesVo"/>
        <where>  
            <if test="EmployeeName != null  and EmployeeName != ''"> and EmployeeName like concat('%', #{EmployeeName}, '%')</if>
            <if test="phonenumber != null  and phonenumber != ''"> and phonenumber = #{phonenumber}</if>
            <if test="status != null  and status != ''"> and status = #{status}</if>
        </where>
    </select>
    
    <select id="selectEmployeesByEmployeeId" parameterType="Integer" resultMap="EmployeesResult">
        <include refid="selectEmployeesVo"/>
        where EmployeeId = #{EmployeeId}
    </select>
        
    <insert id="insertEmployees" parameterType="Employees" useGeneratedKeys="true" keyProperty="EmployeeId">
        insert into employees
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="EmployeeName != null and EmployeeName != ''">EmployeeName,</if>
            <if test="gender != null">gender,</if>
            <if test="email != null">email,</if>
            <if test="phonenumber != null">phonenumber,</if>
            <if test="position != null">position,</if>
            <if test="department != null">department,</if>
            <if test="enterDate != null">enterDate,</if>
            <if test="status != null">status,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="EmployeeName != null and EmployeeName != ''">#{EmployeeName},</if>
            <if test="gender != null">#{gender},</if>
            <if test="email != null">#{email},</if>
            <if test="phonenumber != null">#{phonenumber},</if>
            <if test="position != null">#{position},</if>
            <if test="department != null">#{department},</if>
            <if test="enterDate != null">#{enterDate},</if>
            <if test="status != null">#{status},</if>
         </trim>
    </insert>

    <update id="updateEmployees" parameterType="Employees">
        update employees
        <trim prefix="SET" suffixOverrides=",">
            <if test="EmployeeName != null and EmployeeName != ''">EmployeeName = #{EmployeeName},</if>
            <if test="gender != null">gender = #{gender},</if>
            <if test="email != null">email = #{email},</if>
            <if test="phonenumber != null">phonenumber = #{phonenumber},</if>
            <if test="position != null">position = #{position},</if>
            <if test="department != null">department = #{department},</if>
            <if test="enterDate != null">enterDate = #{enterDate},</if>
            <if test="status != null">status = #{status},</if>
        </trim>
        where EmployeeId = #{EmployeeId}
    </update>

    <delete id="deleteEmployeesByEmployeeId" parameterType="Integer">
        delete from employees where EmployeeId = #{EmployeeId}
    </delete>

    <delete id="deleteEmployeesByEmployeeIds" parameterType="String">
        delete from employees where EmployeeId in 
        <foreach item="EmployeeId" collection="array" open="(" separator="," close=")">
            #{EmployeeId}
        </foreach>
    </delete>
</mapper>